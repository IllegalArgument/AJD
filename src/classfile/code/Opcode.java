package classfile.code;

import classfile.ConstantEntry;
import classfile.ConstantType;
import classfile.Primitive;

public class Opcode {

	public static final Opcode
	NOOP = new Opcode(OpType.NOOP, null),
	ACONST_NULL = new Opcode(OpType.CONSTANT_LOAD, ConstantEntry.NULL),
	ICONST_M1 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, -1)),
	ICONST_0 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 0)),
	ICONST_1 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 1)),
	ICONST_2 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 2)),
	ICONST_3 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 3)),
	ICONST_4 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 4)),
	ICONST_5 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.INTEGER, 5)),
	LCONST_0 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.LONG, 0L)),
	LCONST_1 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.LONG, 1L)),
	FCONST_0 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.FLOAT, 0.0F)),
	FCONST_1 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.FLOAT, 1.0F)),
	FCONST_2 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.FLOAT, 2.0F)),
	DCONST_0 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.DOUBLE, 0.0)),
	DCONST_1 = new Opcode(OpType.CONSTANT_LOAD, new ConstantEntry(ConstantType.DOUBLE, 1.0)),
	ILOAD_0 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(0, ComputationalType.INT)),
	ILOAD_1 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(1, ComputationalType.INT)),
	ILOAD_2 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(2, ComputationalType.INT)),
	ILOAD_3 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(3, ComputationalType.INT)),
	LLOAD_0 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(0, ComputationalType.LONG)),
	LLOAD_1 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(1, ComputationalType.LONG)),
	LLOAD_2 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(2, ComputationalType.LONG)),
	LLOAD_3 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(3, ComputationalType.LONG)),
	FLOAD_0 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(0, ComputationalType.FLOAT)),
	FLOAD_1 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(1, ComputationalType.FLOAT)),
	FLOAD_2 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(2, ComputationalType.FLOAT)),
	FLOAD_3 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(3, ComputationalType.FLOAT)),
	DLOAD_0 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(0, ComputationalType.DOUBLE)),
	DLOAD_1 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(1, ComputationalType.DOUBLE)),
	DLOAD_2 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(2, ComputationalType.DOUBLE)),
	DLOAD_3 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(3, ComputationalType.DOUBLE)),
	ALOAD_0 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(0, ComputationalType.REFERENCE)),
	ALOAD_1 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(1, ComputationalType.REFERENCE)),
	ALOAD_2 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(2, ComputationalType.REFERENCE)),
	ALOAD_3 = new Opcode(OpType.LOCAL_LOAD, new LocalVariable(3, ComputationalType.REFERENCE)),
	IALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.INT),
	LALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.LONG),
	FALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.FLOAT),
	DALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.DOUBLE),
	AALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.REFERENCE),
	BALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.BYTE),
	CALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.CHAR),
	SALOAD = new Opcode(OpType.ARRAY_LOAD, Primitive.SHORT),
	ISTORE_0 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(0, ComputationalType.INT)),
	ISTORE_1 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(1, ComputationalType.INT)),
	ISTORE_2 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(2, ComputationalType.INT)),
	ISTORE_3 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(3, ComputationalType.INT)),
	LSTORE_0 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(0, ComputationalType.LONG)),
	LSTORE_1 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(1, ComputationalType.LONG)),
	LSTORE_2 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(2, ComputationalType.LONG)),
	LSTORE_3 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(3, ComputationalType.LONG)),
	FSTORE_0 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(0, ComputationalType.FLOAT)),
	FSTORE_1 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(1, ComputationalType.FLOAT)),
	FSTORE_2 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(2, ComputationalType.FLOAT)),
	FSTORE_3 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(3, ComputationalType.FLOAT)),
	DSTORE_0 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(0, ComputationalType.DOUBLE)),
	DSTORE_1 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(1, ComputationalType.DOUBLE)),
	DSTORE_2 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(2, ComputationalType.DOUBLE)),
	DSTORE_3 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(3, ComputationalType.DOUBLE)),
	ASTORE_0 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(0, ComputationalType.REFERENCE)),
	ASTORE_1 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(1, ComputationalType.REFERENCE)),
	ASTORE_2 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(2, ComputationalType.REFERENCE)),
	ASTORE_3 = new Opcode(OpType.LOCAL_STORE, new LocalVariable(3, ComputationalType.REFERENCE)),
	IASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.INT),
	LASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.LONG),
	FASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.FLOAT),
	DASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.DOUBLE),
	AASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.REFERENCE),
	BASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.BYTE),
	CASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.CHAR),
	SASTORE = new Opcode(OpType.ARRAY_STORE, Primitive.SHORT),
	POP = new Opcode(OpType.STACK_MANAGE, StackManagement.POP),
	POP2 = new Opcode(OpType.STACK_MANAGE, StackManagement.POP2),
	DUP = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP),
	DUP_X1 = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP_X1),
	DUP_X2 = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP_X2),
	DUP2 = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP2),
	DUP2_X1 = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP2_X1),
	DUP2_X2 = new Opcode(OpType.STACK_MANAGE, StackManagement.DUP2_X2),
	SWAP = new Opcode(OpType.STACK_MANAGE, StackManagement.SWAP),
	IADD = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.ADD, ComputationalType.INT)),
	LADD = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.ADD, ComputationalType.LONG)),
	FADD = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.ADD, ComputationalType.FLOAT)),
	DADD = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.ADD, ComputationalType.DOUBLE)),
	ISUB = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.SUBTRACT, ComputationalType.INT)),
	LSUB = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.SUBTRACT, ComputationalType.LONG)),
	FSUB = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.SUBTRACT, ComputationalType.FLOAT)),
	DSUB = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.SUBTRACT, ComputationalType.DOUBLE)),
	IMUL = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.MULTIPLY, ComputationalType.INT)),
	LMUL = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.MULTIPLY, ComputationalType.LONG)),
	FMUL = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.MULTIPLY, ComputationalType.FLOAT)),
	DMUL = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.MULTIPLY, ComputationalType.DOUBLE)),
	IDIV = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.DIVIDE, ComputationalType.INT)),
	LDIV = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.DIVIDE, ComputationalType.LONG)),
	FDIV = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.DIVIDE, ComputationalType.FLOAT)),
	DDIV = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.DIVIDE, ComputationalType.DOUBLE)),
	IREM = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.REMAINDER, ComputationalType.INT)),
	LREM = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.REMAINDER, ComputationalType.LONG)),
	FREM = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.REMAINDER, ComputationalType.FLOAT)),
	DREM = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.REMAINDER, ComputationalType.DOUBLE)),
	INEG = new Opcode(OpType.NEGATE, ComputationalType.INT),
	LNEG = new Opcode(OpType.NEGATE, ComputationalType.LONG),
	FNEG = new Opcode(OpType.NEGATE, ComputationalType.FLOAT),
	DNEG = new Opcode(OpType.NEGATE, ComputationalType.DOUBLE),
	ISHL = new Opcode(OpType.SHIFT, new Shift(ShiftType.SHIFT_LEFT, ComputationalType.INT)),
	LSHL = new Opcode(OpType.SHIFT, new Shift(ShiftType.SHIFT_LEFT, ComputationalType.LONG)),
	ISHR = new Opcode(OpType.SHIFT, new Shift(ShiftType.SHIFT_RIGHT, ComputationalType.INT)),
	LSHR = new Opcode(OpType.SHIFT, new Shift(ShiftType.SHIFT_RIGHT, ComputationalType.LONG)),
	IUSHR = new Opcode(OpType.SHIFT, new Shift(ShiftType.LOGICAL_SHIFT_RIGHT, ComputationalType.INT)),
	LUSHR = new Opcode(OpType.SHIFT, new Shift(ShiftType.LOGICAL_SHIFT_RIGHT, ComputationalType.LONG)),
	IAND = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.AND, ComputationalType.INT)),
	LAND = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.AND, ComputationalType.LONG)),
	IOR = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.OR, ComputationalType.INT)),
	LOR = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.OR, ComputationalType.LONG)),
	IXOR = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.XOR, ComputationalType.INT)),
	LXOR = new Opcode(OpType.ARITHMETIC, new Arithmetic(ArithmeticType.XOR, ComputationalType.LONG)),
	I2L = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.LONG)),
	I2F = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.FLOAT)),
	I2D = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.DOUBLE)),
	L2I = new Opcode(OpType.CONVERT, new Conversion(Primitive.LONG, Primitive.INT)),
	L2F = new Opcode(OpType.CONVERT, new Conversion(Primitive.LONG, Primitive.FLOAT)),
	L2D = new Opcode(OpType.CONVERT, new Conversion(Primitive.LONG, Primitive.DOUBLE)),
	F2I = new Opcode(OpType.CONVERT, new Conversion(Primitive.FLOAT, Primitive.INT)),
	F2L = new Opcode(OpType.CONVERT, new Conversion(Primitive.FLOAT, Primitive.LONG)),
	F2D = new Opcode(OpType.CONVERT, new Conversion(Primitive.FLOAT, Primitive.DOUBLE)),
	D2I = new Opcode(OpType.CONVERT, new Conversion(Primitive.DOUBLE, Primitive.INT)),
	D2L = new Opcode(OpType.CONVERT, new Conversion(Primitive.DOUBLE, Primitive.LONG)),
	D2F = new Opcode(OpType.CONVERT, new Conversion(Primitive.DOUBLE, Primitive.FLOAT)),
	I2B = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.BYTE)),
	I2C = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.CHAR)),
	I2S = new Opcode(OpType.CONVERT, new Conversion(Primitive.INT, Primitive.SHORT)),
	LCMP = new Opcode(OpType.COMPARE, new Comparison(ComputationalType.LONG, CompareOption.NORMAL)),
	FCMPL = new Opcode(OpType.COMPARE, new Comparison(ComputationalType.FLOAT, CompareOption.LESS_DEFAULT)),
	FCMPG = new Opcode(OpType.COMPARE, new Comparison(ComputationalType.FLOAT, CompareOption.GREATER_DEFAULT)),
	DCMPL = new Opcode(OpType.COMPARE, new Comparison(ComputationalType.DOUBLE, CompareOption.LESS_DEFAULT)),
	DCMPG = new Opcode(OpType.COMPARE, new Comparison(ComputationalType.DOUBLE, CompareOption.GREATER_DEFAULT)),
	IRETURN = new Opcode(OpType.RETURN, ComputationalType.INT),
	LRETURN = new Opcode(OpType.RETURN, ComputationalType.LONG),
	FRETURN = new Opcode(OpType.RETURN, ComputationalType.FLOAT),
	DRETURN = new Opcode(OpType.RETURN, ComputationalType.DOUBLE),
	ARETURN = new Opcode(OpType.RETURN, ComputationalType.REFERENCE),
	RETURN = new Opcode(OpType.RETURN, ComputationalType.VOID),
	ARRAYLENGTH = new Opcode(OpType.ARRAY_LENGTH, null),
	ATHROW = new Opcode(OpType.THROW, null),
	MONITORENTER = new Opcode(OpType.SYNCHRONIZE, true),
	MONITOREXIT = new Opcode(OpType.SYNCHRONIZE, false);

	public final OpType type;
	public final Object data;

	public Opcode(OpType type, Object data) {
		this.type = type;
		this.data = data;
	}

	@Override
	public String toString() {
		return type + (data != null ? " [" + data + "]" : "");
	}

}
